diff --git a/media_entity_file_replace.module b/media_entity_file_replace.module
index 54efeab..59ad875 100644
--- a/media_entity_file_replace.module
+++ b/media_entity_file_replace.module
@@ -5,9 +5,11 @@
  * Media Entity File Replace module file.
  */
 
+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
+use Drupal\media\MediaInterface;
 use Drupal\media\Plugin\media\Source\File;
 
 /**
@@ -63,19 +65,32 @@ function media_entity_file_replace_entity_extra_field_info() {
  * media_entity_file_replace_entity_extra_field_info().
  */
 function media_entity_file_replace_form_media_form_alter(&$form, FormStateInterface $form_state, $form_id) {
+  /** @var \Drupal\media\MediaInterface $media */
   $media = $form_state->getFormObject()->getEntity();
+
   // Don't modify the form at all for new media that is being added, since there
   // is nothing for us to do.
-  if (!$media->isNew()) {
-    // Only run for media entity types that use a file based source field.
-    /** @var \Drupal\media\Entity\MediaType $mediaType */
-    $mediaType = \Drupal::entityTypeManager()->getStorage('media_type')->load($media->bundle());
-    if (!$mediaType->getSource() instanceof File) {
+  if ($media->isNew()) {
+    return;
+  }
+
+  // Only run for media entity types that use a file based source field.
+  /** @var \Drupal\media\Entity\MediaType $mediaType */
+  $mediaType = \Drupal::entityTypeManager()->getStorage('media_type')->load($media->bundle());
+  if (!$mediaType->getSource() instanceof File) {
+    return;
+  }
+
+  $sourceFieldDefinition = $mediaType->getSource()->getSourceFieldDefinition($mediaType);
+  $sourceFieldName = $sourceFieldDefinition->getName();
+
+  // Content translation support for Media field.
+  if (!$media->isDefaultTranslation()) {
+    if ($media->isDefaultTranslationAffectedOnly() && !$sourceFieldDefinition->isTranslatable()) {
+      // Stop processing if the field is not translatable and visible.
       return;
     }
 
-    $sourceFieldDefinition = $mediaType->getSource()->getSourceFieldDefinition($mediaType);
-    $sourceFieldName = $sourceFieldDefinition->getName();
     // Make sure we have a file field item and that the file entity exists.
     // It's possible the file field item still exists (the reference to it)
     // but that the file entity was deleted.
@@ -85,83 +100,140 @@ function media_entity_file_replace_form_media_form_alter(&$form, FormStateInterf
       return;
     }
 
-    $form['replace_file'] = [
-      '#type' => 'fieldset',
-      '#title' => t('Replace file'),
-    ];
-
-    $uploadValidators = $fileFieldItem->getUploadValidators();
-    $form['replace_file']['replacement_file'] = [
-      '#title' => t('File'),
-      '#type' => 'file',
-      // Note that the 'file' element does not support automatic handling of
-      // upload_validators like 'file_managed' does, but we pass it here anyway
-      // so that we can manually use it in the submit handler.
-      '#upload_validators' => $uploadValidators,
-      // Pass source field name so we don't need to execute the logic again
-      // to figure it out in the submit handler.
-      '#source_field_name' => $sourceFieldName,
-    ];
-
-    // Build help text for the replacement file upload field that indicates
-    // what the upload restrictions are (which we get from the source field).
-    // This help text comes by default with the "managed_file" form element,
-    // but we are using the standard "file" form element.
-    $helpText = [
-      '#theme' => 'file_upload_help',
-      '#upload_validators' => $uploadValidators,
-      '#cardinality' => 1,
-    ];
-    $form['replace_file']['replacement_file']['#description'] = \Drupal::service('renderer')->renderPlain($helpText);
-
-    $form['replace_file']['keep_original_filename'] = [
-      '#title' => t('Overwrite original file'),
-      '#description' => t('When checked, the original filename is kept and its contents are replaced with the new file. If unchecked, the filename of the replacement file will be used, and the original file may be deleted if no previous revision references it (depending on your specific site configuration).'),
-      '#type' => 'checkbox',
-      '#default_value' => TRUE,
-    ];
-
-    $form['#validate'][] = '_media_entity_file_replace_validate';
-
-    // We need a submit callback to handle our processing. We want it to run
-    // just before the normal MediaForm::save() callback is called, so that
-    // the various entity lifecycle hooks that are called there will have
-    // access to the changes we make.
-    $saveCallbackPosition = array_search('::save', $form['actions']['submit']['#submit']);
-    if ($saveCallbackPosition !== FALSE) {
-      array_splice($form['actions']['submit']['#submit'], $saveCallbackPosition, 0, '_media_entity_file_replace_submit');
+    if ($media->isNewTranslation()) {
+      // Content translation support for File in Media field.
+      $contentTranslationSettings = $sourceFieldDefinition->getThirdPartySettings('content_translation');
+      if (!empty($contentTranslationSettings['translation_sync']['file'])) {
+        // Allow an other image for the new translation, after that the
+        // replace_file widget will be handling replacements.
+        return;
+      }
+
+      // Content translation support for File attributes in Media field.
+      $hideUntranslatableFields = $media->isDefaultTranslationAffectedOnly() && $sourceFieldDefinition->isTranslatable();
+      if ($hideUntranslatableFields) {
+        $form[$sourceFieldName]['widget'][0]['#process'][] = '_media_entity_file_replace_disable_remove_button';
+        return;
+      }
     }
-    else {
-      // If for some reason we cannot find the normal save callback in the list,
-      // then just insert our callback at the end.
-      $form['actions']['submit']['#submit'][] = '_media_entity_file_replace_submit';
+  }
+
+  $form['replace_file'] = [
+    '#type' => 'fieldset',
+    '#title' => t('Replace file'),
+    '#multilingual' => $sourceFieldDefinition->isTranslatable(),
+  ];
+
+  $uploadValidators = $media->get($sourceFieldName)->first()->getUploadValidators();
+  $form['replace_file']['replacement_file'] = [
+    '#title' => t('File'),
+    '#type' => 'file',
+    // Note that the 'file' element does not support automatic handling of
+    // upload_validators like 'file_managed' does, but we pass it here anyway
+    // so that we can manually use it in the submit handler.
+    '#upload_validators' => $uploadValidators,
+    // Pass source field name so we don't need to execute the logic again
+    // to figure it out in the submit handler.
+    '#source_field_name' => $sourceFieldName,
+  ];
+
+  // Build help text for the replacement file upload field that indicates
+  // what the upload restrictions are (which we get from the source field).
+  // This help text comes by default with the "managed_file" form element,
+  // but we are using the standard "file" form element.
+  $helpText = [
+    '#theme' => 'file_upload_help',
+    '#upload_validators' => $uploadValidators,
+    '#cardinality' => 1,
+  ];
+  $form['replace_file']['replacement_file']['#description'] = \Drupal::service('renderer')->renderPlain($helpText);
+
+  $replaceable = _media_entity_file_replace_is_original($media, $sourceFieldDefinition);
+  $form['replace_file']['keep_original_filename'] = [
+    '#title' => t('Overwrite original file'),
+    '#description' => t('When checked, the original filename is kept and its contents are replaced with the new file. If unchecked, the filename of the replacement file will be used, and the original file may be deleted if no previous revision references it (depending on your specific site configuration).'),
+    '#type' => 'checkbox',
+    '#default_value' => $replaceable,
+    // Hide this field if replacement is not advised for better UX experience.
+    '#access' => $replaceable,
+  ];
+
+  $form['#validate'][] = '_media_entity_file_replace_validate';
+
+  // We need a submit callback to handle our processing. We want it to run
+  // just before the normal MediaForm::save() callback is called, so that
+  // the various entity lifecycle hooks that are called there will have
+  // access to the changes we make.
+  $saveCallbackPosition = array_search('::save', $form['actions']['submit']['#submit']);
+  if ($saveCallbackPosition !== FALSE) {
+    array_splice($form['actions']['submit']['#submit'], $saveCallbackPosition, 0, '_media_entity_file_replace_submit');
+  }
+  else {
+    // If for some reason we cannot find the normal save callback in the list,
+    // then just insert our callback at the end.
+    $form['actions']['submit']['#submit'][] = '_media_entity_file_replace_submit';
+  }
+
+  // If the normal file/image widget is on the form, then we want to hide
+  // the action buttons that users would normally use to manage the file.
+  // This widget doesn't allow for true file replacement, so we don't want
+  // editors to use it. We do still want the portion of the widget that
+  // displays the name of the file to render, so we don't remove the entire
+  // widget outright.
+  // This must be done in a process callback, since the action buttons on
+  // the widget are themselves added in a process callback.
+  if (isset($form[$sourceFieldName]['widget'][0]) && $form[$sourceFieldName]['widget'][0]['#type'] === 'managed_file') {
+    $form[$sourceFieldName]['widget'][0]['#process'][] = '_media_entity_file_replace_disable_remove_button';
+  }
+}
+
+/**
+ * Validate if the file to replace is the original File.
+ *
+ * We don't want to replace an original File, if it was already translated
+ * with the same reference to the File entity. This will check that case.
+ *
+ * @param \Drupal\media\MediaInterface $media
+ *   The Media entity.
+ * @param \Drupal\Core\Field\FieldDefinitionInterface $sourceFieldDefinition
+ *   The source field definition of the file inside the Media entity.
+ *
+ * @return bool
+ *   True, if the file is the original Field and File entity.
+ */
+function _media_entity_file_replace_is_original(MediaInterface $media, FieldDefinitionInterface $sourceFieldDefinition) {
+  $sourceFieldName = $sourceFieldDefinition->getName();
+
+  if ($media->isDefaultTranslation()) {
+    return TRUE;
+  }
+
+  // All fields visible.
+  if (!$media->isDefaultTranslationAffectedOnly()) {
+    if (!$sourceFieldDefinition->isTranslatable()) {
+      return TRUE;
     }
 
-    // If the normal file/image widget is on the form, then we want to hide
-    // the action buttons that users would normally use to manage the file.
-    // This widget doesn't allow for true file replacement, so we don't want
-    // editors to use it. We do still want the portion of the widget that
-    // displays the name of the file to render, so we don't remove the entire
-    // widget outright.
-    // This must be done in a process callback, since the action buttons on
-    // the widget are themselves added in a process callback.
-    if (isset($form[$sourceFieldName]['widget'][0]) && $form[$sourceFieldName]['widget'][0]['#type'] === 'managed_file') {
-      $form[$sourceFieldName]['widget'][0]['#process'][] = '_media_entity_file_replace_disable_remove_button';
+    $contentTranslationSettings = $sourceFieldDefinition->getThirdPartySettings('content_translation');
+    if (empty($contentTranslationSettings['translation_sync']['file'])) {
+      return TRUE;
     }
   }
+
+  $untranslatedMedia = $media->getUntranslated();
+  $translatedFileId = $media->{$sourceFieldName}->target_id;
+  $untranslatedFileId = $untranslatedMedia->{$sourceFieldName}->target_id;
+
+  return ($translatedFileId !== $untranslatedFileId);
 }
 
 /**
  * Custom process callback on file widget to disable remove/upload buttons.
  */
 function _media_entity_file_replace_disable_remove_button(&$element, FormStateInterface $form_state, &$complete_form) {
-  // We only want to do this on media edit forms that are configured to use
-  // our "replace file" widget, so we check to make sure it's there and
-  // accessible before continuing.
-  if (!isset($complete_form['replace_file']['#access']) || $complete_form['replace_file']['#access'] === TRUE) {
-    $element['remove_button']['#access'] = FALSE;
-    $element['upload_button']['#access'] = FALSE;
-  }
+  $element['remove_button']['#access'] = FALSE;
+  $element['upload_button']['#access'] = FALSE;
+
   return $element;
 }
 
